##################################################################################
# Download Suricata and install deps
##################################################################################
- name: Check if pf_ring module is loaded
  modprobe:
    name: 'pf_ring'
    state: present

- name: Install deps
  apt:
    name: ['libpcre3', 'libpcre3-dbg', 'libpcre3-dev', 'build-essential', 'libpcap-dev', 'libnet1-dev', 'libyaml-0-2', 'libyaml-dev', 'pkg-config', 'zlib1g', 'zlib1g-dev', 'libcap-ng-dev', 'libcap-ng0', 'make', 'libmagic-dev', 'libjansson-dev', 'libnss3-dev', 'libgeoip-dev', 'liblua5.1-dev', 'libhiredis-dev', 'libevent-dev', 'python-yaml', 'rustc', 'cargo', 'liblz4-dev']
    state: latest

- name: Stat Suricata
  stat:
    path: '{{ suricata_dir }}'
  register: suricata_dir_stat

- name: Download Suricata
  get_url:
    url: '{{ suricata_tar_url }}'
    dest: /tmp/suricata-{{ suricata_version }}.tar.gz
  when: not suricata_dir_stat.stat.exists

- name: Create {{ suricata_dir }}
  file:
    path: '{{ suricata_dir }}'
    state: directory
    owner: root
    group: root
  when: not suricata_dir_stat.stat.exists

- name: Unarchive suricata-{{ suricata_version }}.tar.gz
  unarchive:
    src: /tmp/suricata-{{ suricata_version }}.tar.gz
    dest: '{{ suricata_dir }}'
    remote_src: yes
    extra_opts: [--strip-components=1]
  when: not suricata_dir_stat.stat.exists


##################################################################################
# Compile Suricata
##################################################################################
- name: Stat Suricata
  stat:
    path: '{{ suricata_configure_sysconfdir }}/suricata'
  register: suricata_conf_dir_stat

- name: Configure Suricata
  shell: '{{ suricata_configure }}'
  args:
    chdir: '{{ suricata_dir }}'
  when: not suricata_conf_dir_stat.stat.exists

- name: Make
  make:
    chdir: '{{ suricata_dir }}'
  when: not suricata_conf_dir_stat.stat.exists

- name: Make install
  make:
    chdir: '{{ suricata_dir }}'
    target: install
  when: not suricata_conf_dir_stat.stat.exists

- name: Make install-conf
  shell: 'make install-conf'
  args:
    chdir: '{{ suricata_dir }}'
  when: not suricata_conf_dir_stat.stat.exists


#################################################################################
# Configure Suricata
#################################################################################
- name: Stat Suricata
  stat:
    path: '{{ suricata_configure_sysconfdir }}/suricata'
  register: suricata_conf_dir_stat

- name: Backup suricata.yaml
  copy:
    src: '/etc/suricata/suricata.yaml'
    dest: /etc/suricata/suricata.yaml.bak'
    remote_src: yes
    backup: yes
    mode: 0400
    owner: root
    group: root
  when: suricata_conf_dir_stat.stat.exists

- name: Get public IP
  uri:
    url: 'https://api.ipify.org?format=json'
    return_content: yes
  register: json_response
  failed_when: "'ip' not in json_response.content"

- name: Print public IP
  debug:
    msg: '{{ json_response.json }}'

# https://docs.ansible.com/ansible/latest/user_guide/playbooks_advanced_syntax.html
- name: Copy suricata.yaml
  template:
    src: 'conf/suricata/suricata.yaml.j2'
    dest: '/etc/suricata/suricata.yaml'
    mode: 0644
    owner: root
    group: root
  when: suricata_conf_dir_stat.stat.exists

- name: Check if {{ suricata_username }} user exists
  getent: 
    database: 'passwd' 
    key: '{{ suricata_username }}'
  ignore_errors: true
  register: user_stats

- name: Create Suricata user
  shell: 'adduser --disabled-login --shell /bin/false --system --home /nonexistent --no-create-home --ingroup root {{ suricata_username }}'
  when: user_stats is failed

- name: Check if {{ suricata_username }} user exists, fail if it fails
  getent: 
    database: 'passwd' 
    key: '{{ suricata_username }}'

- name: Allow Suricata user to write to log directory
  file:
    path: '{{suricata_configure_localstatedir }}/log/suricata'
    state: directory
    owner: '{{ suricata_username }}'
    group: 'root'
    recurse: yes

- name: Copy /etc/default/suricata
  template:
    src: 'conf/suricata/default_suricata_pf-ring'
    dest: '/etc/default/suricata'
    mode: 0640
    owner: root
    group: root

- name: Copy Suricata init.d
  template:
    src: 'conf/suricata/suricata-pf_ring-init.sh'
    dest: '/etc/init.d/suricata'
    mode: 0750
    owner: root
    group: root

# shell: '/etc/init.d/suricata start'
- name: Run Suricata init.d script
  sysvinit:
    name: 'suricata'
    state: started
    
- name: Restart Suricata
  service:
    name: 'suricata'
    state: restarted
    enabled: yes

##################################################################################
# Install Suricata rules manager
##################################################################################
- name: Make Suricata rules directory
  file:
    path: '{{ suricata_configure_sysconfdir }}/suricata/rules'
    state: directory
    owner: root
    group: root
    mode: 0640


- name: Copy custom disable.conf rule files
  template:
    src: 'conf/suricata/rules/disable.conf'
    dest: '{{ suricata_configure_sysconfdir }}/suricata/disable.conf'
    owner: root
    group: root
    mode: 0640

- name: Copy custom suricata rule files
  template:
    src: 'conf/suricata/rules/local.rules'
    dest: '{{ suricata_configure_sysconfdir }}/suricata/rules/local.rules'
    owner: root
    group: root
    mode: 0640

# https://readthedocs.org/projects/suricata-update/downloads/pdf/latest/
- name: Copy Update config
  template:
    src: 'conf/suricata/suricata_update.yml'
    dest: '/etc/suricata/update.yaml'
    mode: 0640
    owner: root
    group: root

- name: Stat Suricata rules directory
  stat:
    path: '/var/lib/suricata/rules'
  register: suricata_rules_dir

- name: Init Suricata rules
  shell: 'suricata-update'
  when: not suricata_rules_dir.stat.exists

- name: Update Suricata sources
  shell: 'suricata-update update-sources'
  when: not suricata_rules_dir.stat.exists

- name: Enable Suricata rule sources
  shell: 'suricata-update enable-source {{ item }}'
  with_items:
    - 'et/open'
    - 'oisf/trafficid'
    - 'ptresearch/attackdetection'
    - 'sslbl/ssl-fp-blacklist'
    - 'sslbl/ja3-fingerprints'
    - 'etnetera/aggressive'
    - 'tgreen/hunting'
  when: not suricata_rules_dir.stat.exists

- name: Update Suricata rules
  shell: 'suricata-update'

- name: Restart Suricata
  service:
    name: 'suricata'
    state: restarted
    enabled: yes

##############################################################
# Enable Suricata Filebeat module
##############################################################    
- name: Check status of Suricata filebeat module
  stat:
    path: '/etc/filebeat/modules.d/suricata.yml'
  register: suricata_filebeat_module_status

- name: Enable Osquery Filebeat module
  copy:
    src: '/etc/filebeat/modules.d/suricata.yml.disabled'
    dest: '/etc/filebeat/modules.d/suricata.yml'
    remote_src: yes
  when: not suricata_filebeat_module_status.stat.exists

- name: Restart Filebeat
  service:
    name: 'filebeat'
    enabled: yes
    state: restarted
  when: not suricata_filebeat_module_status.stat.exists

- name: Verify Suricata is running and logging
  wait_for:
    path: '/var/log/suricata/eve.json'
    delay: 10
  retries: 10